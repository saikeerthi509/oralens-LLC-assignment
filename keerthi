#assignment 1


import cv2

def preprocess_frame(frame):
    
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    
    _, thresholded = cv2.threshold(blurred, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
    return thresholded

def detect_data_areas(frame):
    
    contours, _ = cv2.findContours(frame, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    data_areas = []
    
    for contour in contours:
        area = cv2.contourArea(contour)
        if area > 1000:  # Arbitrary threshold for area size
            x, y, w, h = cv2.boundingRect(contour)
            data_areas.append((x, y, w, h))
    return data_areas

def main():
   
    cap = cv2.VideoCapture('video_feed.mp4')  # Replace 'video_feed.mp4' with actual video source
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        
        processed_frame = preprocess_frame(frame)

        
        data_areas = detect_data_areas(processed_frame)

        
        for (x, y, w, h) in data_areas:
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

        
        cv2.imshow('Data Areas Detection', frame)

        
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

if _name_ == "_main_":
    main()



# assignment 2

#include <WiFi.h>
#include <esp_camera.h>

// WiFi credentials
const char* ssid = "YourWiFiSSID";
const char* password = "YourWiFiPassword";

// Camera settings
const int camera_width = 640;
const int camera_height = 480;

void setup() {
  Serial.begin(115200);
  initCamera();
  connectToWiFi();
}

void loop() {
  // Capture image from camera
  camera_fb_t* fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Failed to capture image");
    return;
  }

  // Send image data over WiFi
  if (sendImageData(fb)) {
    Serial.println("Image transmitted successfully");
  } else {
    Serial.println("Failed to transmit image");
  }

  // Release the frame buffer
  esp_camera_fb_return(fb);

  delay(5000); // Capture and transmit image every 5 seconds
}

void initCamera() {
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;

  if (psramFound()) {
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  }

  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }
}

void connectToWiFi() {
  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
}

bool sendImageData(camera_fb_t* fb) {
  // TODO: Implement code to send image data over WiFi
  // This could involve using HTTP POST requests, MQTT, or other protocols
  // For simplicity, we'll just print the size of the image data here
  Serial.printf("Image size: %u bytes\n", fb->len);
  return true; // Return true if transmission was successful
}


#assignment 3


import tkinter as tk
from gpiozero import Servo, DistanceSensor
import RPi.GPIO as GPIO

# Initialize GPIO pins
GPIO.setmode(GPIO.BCM)
GPIO.setup(18, GPIO.OUT)  # GPIO pin for stepper motor
GPIO.setup(19, GPIO.OUT)  # GPIO pin for servo motor (pan)
GPIO.setup(20, GPIO.OUT)  # GPIO pin for servo motor (tilt)

# Initialize servo motors
pan_servo = Servo(19)
tilt_servo = Servo(20)

def move_height(direction):
    # Code to control stepper motor for height adjustment
    pass

def move_pan(direction):
    # Code to control pan servo motor
    pass

def move_tilt(direction):
    # Code to control tilt servo motor
    pass

# Create Tkinter GUI
root = tk.Tk()
root.title("IoT Device Control")

# Create buttons for height adjustment
height_up_btn = tk.Button(root, text="Up", command=lambda: move_height("up"))
height_up_btn.grid(row=0, column=0)
height_down_btn = tk.Button(root, text="Down", command=lambda: move_height("down"))
height_down_btn.grid(row=1, column=0)

# Create buttons for pan adjustment
pan_left_btn = tk.Button(root, text="Left", command=lambda: move_pan("left"))
pan_left_btn.grid(row=0, column=1)
pan_right_btn = tk.Button(root, text="Right", command=lambda: move_pan("right"))
pan_right_btn.grid(row=1, column=1)

# Create buttons for tilt adjustment
tilt_up_btn = tk.Button(root, text="Up", command=lambda: move_tilt("up"))
tilt_up_btn.grid(row=0, column=2)
tilt_down_btn = tk.Button(root, text="Down", command=lambda: move_tilt("down"))
tilt_down_btn.grid(row=1, column=2)

root.mainloop()
